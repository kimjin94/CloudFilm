<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="recommendMapper">

	<!-- 추천 저장  -->
	<insert id="insert_recommend" parameterType="board">
		insert into board
		values
		(board_seq.nextval,#{mem_id},#{board_title},#{board_cont},
		#{board_img},#{board_video},#{board_filter},SYSDATE, 
		0, 0, 0, 2, 'y', 'n', #{mem_num})
	</insert>
	<!-- 추천 총 게시물 수 -->
	<select id="recommendlist_count" resultType="int" parameterType="int">
		select count(board_num) from board where cate_num = 2
	</select>
	
	<!-- 추천 목록  -->
	<select id="recommend_list" parameterType="int" resultType="board">
		select *
		from 
		(
		    select rownum rnum, board.* 
		    from  
		    (
		        select 
		        a.BOARD_NUM, a.MEM_ID, a.BOARD_TITLE, a.BOARD_CONT, a.BOARD_IMG, 
		        a.BOARD_VIDEO, a.BOARD_FILTER, a.BOARD_DATE, a.BOARD_COUNT, 
		        a.CATE_NUM, a.BOARD_YN, a.INFO_YN, a.MEM_NUM, e.mem_nick
		        , count(b.gb_sort) as board_good
		        , count(c.gb_sort) as board_bad
		        , count(d.re_num) as re_count
		        from board a
		            left join goodandbad b
		                on a.board_num = b.board_num
		                and b.gb_sort = 'g'
		            left join goodandbad c
		                on a.board_num = c.board_num 
		                and b.gb_sort = 'b'
		            left join reply d
		                on a.board_num = d.board_num
		            left join member e
		                on a.mem_num = e.mem_num
		        where a.cate_num = 2 
		        group by 
	        		 a.board_num, a.MEM_ID, a.BOARD_TITLE, a.BOARD_CONT, a.BOARD_IMG, 
					 a.BOARD_VIDEO, a.BOARD_FILTER, a.BOARD_DATE, a.BOARD_COUNT, a.CATE_NUM, 
					 a.BOARD_YN, a.INFO_YN, a.MEM_NUM, e.mem_nick
		        order by a.BOARD_num desc
		    ) board
		)
		<![CDATA[ 
		where rnum >= ((#{page}-1) * 20+1)  and rnum <= (#{page} * 20)
		]]>
		
	</select>

	<!-- 필터적용 추천 총 게시물 수 -->
	<select id="recommendFilter_count" resultType="int" parameterType="String">
		select count(board_num)
		from board b
			left join member m
				on b.mem_num = m.mem_num
			where b.cate_num = 2 and board_filter = #{board_filter}
	</select>
	
	<!-- 필터적용 추천 목록 -->
	<select id="recommendFilter_list" parameterType="java.util.Map" resultType="board">
		select * from
		(
			select rownum rnum, board.* from
			(
			select 
		        a.BOARD_NUM, a.MEM_ID, a.BOARD_TITLE, a.BOARD_CONT, a.BOARD_IMG, 
		        a.BOARD_VIDEO, a.BOARD_FILTER, a.BOARD_DATE, a.BOARD_COUNT, 
		        a.CATE_NUM, a.BOARD_YN, a.INFO_YN, a.MEM_NUM, e.mem_nick
		        , count(b.gb_sort) as board_good
		        , count(c.gb_sort) as board_bad
		        , count(d.re_num) as re_count
		        from board a
		            left join goodandbad b
		                on a.board_num = b.board_num
		                and b.gb_sort = 'g'
		            left join goodandbad c
		                on a.board_num = c.board_num 
		                and b.gb_sort = 'b'
		            left join reply d
		                on a.board_num = d.board_num
		            left join member e
		                on a.mem_num = e.mem_num
		        where a.cate_num = 2 and board_filter=#{board_filter} 
		        group by 
	        		 a.board_num, a.MEM_ID, a.BOARD_TITLE, a.BOARD_CONT, a.BOARD_IMG, 
					 a.BOARD_VIDEO, a.BOARD_FILTER, a.BOARD_DATE, a.BOARD_COUNT, a.CATE_NUM, 
					 a.BOARD_YN, a.INFO_YN, a.MEM_NUM, e.mem_nick
		        order by a.BOARD_num desc
			)board
		)
		<![CDATA[where rnum >= ((#{page}-1) * 20+1)  and rnum <= (#{page} * 20)]]>
	</select>
	
	<!-- 추천게시판 원문내용 -->
	<select id="recommend_cont" resultType="board" parameterType="int">
		select * from board where board_num =#{board_num}
	</select>
	
	<!-- 게시글 조회수 증가 -->
	<update id="recommend_hit" parameterType="int">
		update board set
		board_count=board_count+1
		where board_num=#{board_num} and cate_num = 2	
	</update>
	
	<!-- 게시판 수정 -->
	<update id="recommend_update" parameterType="board">
		update board set
		board_title=#{board_title},board_cont=#{board_cont},board_img=#{board_img},
		board_filter=#{board_filter} where board_num=#{board_num} and cate_num= 2
	</update>
	
	<!-- 게시물 삭제 -->
	<delete id="recommend_delete" parameterType="int">
	delete from board where board_num =#{board_num}
	</delete>
	
	<!-- 추천 게시판 검색 결과 갯수 -->
	<select id="recommendSearch_count" parameterType="java.util.Map" resultType="int">
		select count(board_num)
		from board b
			left join member m
				on b.mem_num = m.mem_num
			where b.cate_num = 2
			<if  test= "keyword != null">
				and ${search} like '%'||#{keyword}||'%'
			</if>	
	</select>
	
	<!-- 추천게시판 검색결과 리스트 -->
	<select id="recommendSearch_list" parameterType="java.util.Map" resultType="board">
		select * from
		(
			select rownum rnum, board.* from
			(
			select 
		        a.BOARD_NUM, a.MEM_ID, a.BOARD_TITLE, a.BOARD_CONT, a.BOARD_IMG, 
		        a.BOARD_VIDEO, a.BOARD_FILTER, a.BOARD_DATE, a.BOARD_COUNT, 
		        a.CATE_NUM, a.BOARD_YN, a.INFO_YN, a.MEM_NUM, e.mem_nick
		        , count(b.gb_sort) as board_good
		        , count(c.gb_sort) as board_bad
		        , count(d.re_num) as re_count
		        from board a
		            left join goodandbad b
		                on a.board_num = b.board_num
		                and b.gb_sort = 'g'
		            left join goodandbad c
		                on a.board_num = c.board_num 
		                and b.gb_sort = 'b'
		            left join reply d
		                on a.board_num = d.board_num
		            left join member e
		                on a.mem_num = e.mem_num
		        where a.cate_num = 2 
		        	<if test="keyword != null">
		        		and ${search} like '%'||#{keyword}||'%'
		        	</if>
		        group by 
	        		 a.board_num, a.MEM_ID, a.BOARD_TITLE, a.BOARD_CONT, a.BOARD_IMG, 
					 a.BOARD_VIDEO, a.BOARD_FILTER, a.BOARD_DATE, a.BOARD_COUNT, a.CATE_NUM, 
					 a.BOARD_YN, a.INFO_YN, a.MEM_NUM, e.mem_nick
		        order by a.BOARD_num desc
			)board
		)
		<![CDATA[where rnum >= ((#{page}-1) * 20+1)  and rnum <= (#{page} * 20)]]>
	</select>
</mapper>
